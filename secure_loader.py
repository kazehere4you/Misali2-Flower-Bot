#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Secure Bot Loader - ≈ûifreli Bot Y√ºkleyici
RAM'de √ß√∂zme, Anti-debugging, G√ºvenlik √∂nlemleri
"""

import os
import sys
import time
import tempfile
import shutil
import threading
import ctypes
import psutil
import requests
import hashlib
import platform
import subprocess
import base64
import importlib.util
import warnings
warnings.filterwarnings("ignore")

# === CRYPTO IMPORT (Python 3.13 uyumlu) ===
try:
    from Crypto.Cipher import AES
    CRYPTO_TYPE = "pycryptodome"
    print("‚úÖ Crypto: pycryptodome k√ºt√ºphanesi y√ºklendi")
except ImportError:
    try:
        from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
        from cryptography.hazmat.backends import default_backend
        CRYPTO_TYPE = "cryptography"
        print("‚úÖ Crypto: cryptography k√ºt√ºphanesi y√ºklendi")
        AES = None  # Flag
    except ImportError:
        print("‚ùå CRYPTO HATASI: pycryptodome veya cryptography k√ºt√ºphanesi gerekli!")
        print("üí° √á√∂z√ºm: pip install pycryptodome")
        raise ImportError("Crypto k√ºt√ºphanesi bulunamadƒ±!")

# Obfuscated strings (ROT13)
OBFUSCATED_STRINGS = {
    'DEBUG_DETECTED': 'Qrohttre grfcvg rqvyqv!',  # "Debugger tespit edildi!"
    'VM_DETECTED': 'Fnany znxvar begnzf grfcvg rqvyqv!',  # "Sanal makine ortamƒ± tespit edildi!"
    'TAMPER_ERROR': 'Qbfln ohghayvth ungnfv!',  # "Dosya b√ºt√ºnl√ºƒü√º hatasƒ±!"
    'DECRYPT_ERROR': 'Phmzr ungnfv:',  # "√á√∂zme hatasƒ±:"
    'API_ERROR': 'NCV ungNfv:',  # "API Hatasƒ±:"
    'CONNECTION_ERROR': 'Ontyngv ungNfv:'  # "Baƒülantƒ± hatasƒ±:"
}

def _decode_string(encoded_str):
    """ROT13 decode string"""
    decoded = ""
    for char in encoded_str:
        if 'a' <= char <= 'z':
            decoded += chr((ord(char) - ord('a') + 13) % 26 + ord('a'))
        elif 'A' <= char <= 'Z':
            decoded += chr((ord(char) - ord('A') + 13) % 26 + ord('A'))
        else:
            decoded += char
    return decoded

class SecurityDefense:
    """G√ºvenlik savunma sistemi"""
    
    @staticmethod
    def get_hwid():
        """Geli≈ümi≈ü Hardware ID olu≈ütur"""
        try:
            hwid_components = []
            
            if platform.system() == "Windows":
                # 1. CPU Serial
                try:
                    cpu_serial = subprocess.check_output('wmic cpu get processorid', shell=True).decode().split('\n')[1].strip()
                    hwid_components.append(cpu_serial)
                except:
                    pass
                
                # 2. Motherboard Serial
                try:
                    mb_serial = subprocess.check_output('wmic baseboard get serialnumber', shell=True).decode().split('\n')[1].strip()
                    hwid_components.append(mb_serial)
                except:
                    pass
                
                # 3. BIOS Serial
                try:
                    bios_serial = subprocess.check_output('wmic bios get serialnumber', shell=True).decode().split('\n')[1].strip()
                    hwid_components.append(bios_serial)
                except:
                    pass
                
                # 4. System UUID
                try:
                    sys_uuid = subprocess.check_output('wmic csproduct get uuid', shell=True).decode().split('\n')[1].strip()
                    hwid_components.append(sys_uuid)
                except:
                    pass
                
                # 5. Network MAC Address
                try:
                    mac_output = subprocess.check_output('getmac /fo csv /nh', shell=True).decode()
                    mac_addr = mac_output.split(',')[0].strip('"')
                    hwid_components.append(mac_addr)
                except:
                    pass
                
                # Kombine hash olu≈ütur
                if hwid_components:
                    combined = '|'.join(filter(None, hwid_components))
                    # SHA256 + MD5 double hash
                    sha_hash = hashlib.sha256(combined.encode()).hexdigest()
                    md5_hash = hashlib.md5(sha_hash.encode()).hexdigest()
                    return md5_hash[:24].upper()  # 24 karakter
                
            else:
                # Linux/Mac i√ßin UUID
                import uuid
                return str(uuid.uuid4()).replace('-', '')[:24].upper()
                
            return "DEFAULT_COMPLEX_HWID"
            
        except Exception as e:
            # Fallback HWID
            import time
            import random
            fallback = f"FALLBACK_{int(time.time())}_{random.randint(1000,9999)}"
            return hashlib.md5(fallback.encode()).hexdigest()[:24].upper()
    
    @staticmethod
    def check_debugger():
        """Geli≈ümi≈ü Anti-debugging kontrolleri"""
        try:
            # 1. Geni≈ületilmi≈ü tehlikeli process listesi
            dangerous_processes = [
                # Debuggers
                'ollydbg.exe', 'ida.exe', 'ida64.exe', 'idaq.exe', 'idaq64.exe',
                'idaw.exe', 'idaw64.exe', 'idag.exe', 'idag64.exe', 'idap.exe',
                'idap64.exe', 'x64dbg.exe', 'x32dbg.exe', 'windbg.exe',
                'immunity debugger.exe', 'immunity.exe', 'radare2.exe', 'r2.exe',
                'ghidra.exe', 'binary ninja.exe', 'dnspy.exe', 'reflexil.exe',
                
                # Memory/Process analyzers
                'cheatengine-x86_64.exe', 'cheatengine.exe', 'processhacker.exe',
                'process monitor.exe', 'procmon.exe', 'procexp.exe', 'procexp64.exe',
                'sysanalyzer.exe', 'apimonitor.exe', 'api monitor.exe',
                'sysinternals.exe', 'autoruns.exe', 'autorunsc.exe',
                
                # Network analyzers
                'wireshark.exe', 'fiddler.exe', 'burpsuite.exe', 'charles.exe',
                'tcpview.exe', 'netmon.exe',
                
                # Reverse engineering tools
                'hollows_hunter.exe', 'pe-sieve.exe', 'pe_sieve.exe', 'pestudio.exe',
                'peview.exe', 'cff explorer.exe', 'hex workshop.exe', 'hxd.exe',
                'pe explorer.exe', 'resource hacker.exe', 'reshacker.exe',
                
                # Decompilers & disassemblers
                'justdecompile.exe', 'dotpeek.exe', 'jetbrains.decompiler.exe',
                'reflexil.exe', 'de4dot.exe', 'megadumper.exe', 'scylla.exe',
                
                # Sandboxes & VMs
                'vmware.exe', 'vmnetdhcp.exe', 'vmnat.exe', 'vboxservice.exe',
                'vboxtray.exe', 'sandboxie.exe', 'sbiesvc.exe', 'ksdumper.exe'
            ]
            
            # 2. Process kontrol√º (g√ºvenli y√∂ntem)
            try:
                for proc in psutil.process_iter(['pid', 'name']):
                    try:
                        proc_name = proc.info['name'].lower() if proc.info['name'] else ""
                        
                        # Sadece kritik debugger'larƒ± kontrol et (daha spesifik)
                        critical_debuggers = [
                            'ollydbg.exe', 'ida.exe', 'ida64.exe', 'x64dbg.exe', 'x32dbg.exe',
                            'cheatengine.exe', 'processhacker.exe'
                        ]
                        
                        for dangerous in critical_debuggers:
                            if dangerous.lower() == proc_name:
                                print(f"‚ö†Ô∏è Kritik debugger tespit edildi: {proc_name}")
                                return True
                                
                    except (psutil.NoSuchProcess, psutil.AccessDenied, AttributeError):
                        continue
            except Exception as e:
                print(f"üîß Process kontrol√º atlandƒ±: {e}")
                pass
            
            # 3. Windows API kontrolleri
            if platform.system() == "Windows":
                try:
                    kernel32 = ctypes.windll.kernel32
                    
                    # IsDebuggerPresent kontrol√º
                    if kernel32.IsDebuggerPresent():
                        return True
                    
                    # CheckRemoteDebuggerPresent kontrol√º
                    debug_flag = ctypes.c_bool()
                    if kernel32.CheckRemoteDebuggerPresent(ctypes.windll.kernel32.GetCurrentProcess(), ctypes.byref(debug_flag)):
                        if debug_flag.value:
                            return True
                    
                    # NtGlobalFlag kontrol√º (PEB)
                    try:
                        ntdll = ctypes.windll.ntdll
                        peb = ctypes.c_void_p()
                        ntdll.NtQueryInformationProcess(
                            ctypes.windll.kernel32.GetCurrentProcess(), 
                            0, ctypes.byref(peb), ctypes.sizeof(peb), None
                        )
                        # PEB+0x68 NtGlobalFlag kontrol√º
                        if peb.value:
                            flags = ctypes.c_ulong.from_address(peb.value + 0x68).value
                            if flags & 0x70:  # FLG_HEAP_ENABLE_TAIL_CHECK | FLG_HEAP_ENABLE_FREE_CHECK | FLG_HEAP_VALIDATE_PARAMETERS
                                return True
                    except:
                        pass
                    
                except:
                    pass
            
            # 4. Timing attack kontrol√º (√ßok toleranslƒ±)
            try:
                import time
                start_time = time.perf_counter()
                dummy_var = sum(range(100))  # Daha basit hesaplama
                end_time = time.perf_counter()
                
                # √áok yava≈ü sistemlerde false positive √∂nlemek i√ßin y√ºksek threshold
                timing_threshold = 0.5  # 500ms (√ßok toleranslƒ±)
                if (end_time - start_time) > timing_threshold:
                    print(f"‚ö†Ô∏è ≈û√ºpheli timing tespit edildi: {(end_time - start_time)*1000:.1f}ms")
                    return True
            except Exception as e:
                print(f"üîß Timing kontrol√º atlandƒ±: {e}")
                pass
            
            return False
            
        except Exception as e:
            # Kritik hata durumunda g√ºvenlik odaklƒ± davran ama false positive'i √∂nle
            print(f"üîß Anti-debugging sistem hatasƒ±: {e}")
            # System hatasƒ± durumunda g√ºvenlik riski d√º≈ü√ºk, devam et
            return False
    
    @staticmethod
    def check_vm():
        """VM/Sandbox tespiti"""
        try:
            vm_indicators = [
                'VMware', 'VirtualBox', 'QEMU', 'Xen', 'Bochs',
                'Microsoft Corporation', 'innotek GmbH', 'Parallels',
                'Red Hat', 'oVirt'
            ]
            
            # System info kontrol√º
            system_info = platform.platform().lower()
            for indicator in vm_indicators:
                if indicator.lower() in system_info:
                    return True
                    
            # Windows i√ßin ek kontroller
            if platform.system() == "Windows":
                try:
                    output = subprocess.check_output('wmic computersystem get manufacturer', shell=True).decode()
                    for indicator in vm_indicators:
                        if indicator.lower() in output.lower():
                            return True
                except:
                    pass
                    
            return False
        except Exception as e:
            print(f"üîß VM tespit hatasƒ±: {e}")
            # VM kontrol hatasƒ± durumunda g√ºvenlik riski d√º≈ü√ºk
            return False
    
    @staticmethod
    def anti_tamper():
        """Geli≈ümi≈ü dosya b√ºt√ºnl√ºƒü√º kontrol√º"""
        try:
            # Kritik dosyalarƒ±n varlƒ±k kontrol√º
            critical_files = ['bot_core.enc', 'secure_loader.py']
            for file in critical_files:
                if not os.path.exists(file):
                    return False
            
            # Kod i√ßeriƒüi checksum kontrol√º (self-check) 
            # Production i√ßin g√ºvenli self-check implementasyonu
            try:
                pass  # ≈ûimdilik kapalƒ±, gelecekte g√ºvenli implementasyon
            except:
                pass
                
            # Runtime stack kontrol√º - debugging stack frame var mƒ±?
            import inspect
            frame = inspect.currentframe()
            try:
                frame_count = 0
                while frame and frame_count < 10:  # Sƒ±nƒ±rlƒ± kontrol
                    filename = frame.f_code.co_filename
                    if any(debug_tool in filename.lower() for debug_tool in 
                          ['pdb', 'debugger', 'trace', 'hook']):
                        return False
                    frame = frame.f_back
                    frame_count += 1
            except:
                pass
            finally:
                del frame
                
            return True
        except Exception as e:
            print(f"üîß Dosya b√ºt√ºnl√ºk kontrol hatasƒ±: {e}")
            # Dosya kontrol hatasƒ± durumunda g√ºvenlik riski orta, devam et
            return True

class SecureDecryptor:
    """G√ºvenli √ß√∂zme sistemi"""
    
    def __init__(self):
        self.temp_dir = None
        # ≈ûifreli API URL (Base64 + ROT13 kombinasyonu)
        encrypted_url = "uggc://188.132.186.219:5000"
        self.api_url = self._decrypt_url(encrypted_url)
    
    def _decrypt_url(self, encrypted_url):
        """URL ≈üifresini √ß√∂z"""
        try:
            # ROT13 decode
            decrypted = ""
            for char in encrypted_url:
                if 'a' <= char <= 'z':
                    decrypted += chr((ord(char) - ord('a') + 13) % 26 + ord('a'))
                elif 'A' <= char <= 'Z':
                    decrypted += chr((ord(char) - ord('A') + 13) % 26 + ord('A'))
                else:
                    decrypted += char
            return decrypted
        except:
            return "http://127.0.0.1:5000"  # Fallback
        
    def create_temp_env(self):
        """Ge√ßici √ßalƒ±≈üma ortamƒ± olu≈ütur"""
        try:
            # Sistem temp klas√∂r√ºnde gizli klas√∂r olu≈ütur
            self.temp_dir = tempfile.mkdtemp(prefix='.bot_', suffix='_temp')
            
            # Gizli klas√∂r yap (Windows)
            if platform.system() == "Windows":
                ctypes.windll.kernel32.SetFileAttributesW(self.temp_dir, 0x02)  # Hidden
                
            return True
        except Exception as e:
            print(f"‚ùå Temp ortam hatasƒ±: {e}")
            return False
    
    def get_decrypt_key(self, license_key):
        """API'den decrypt key al - FALLBACK sistemi ile"""
        try:
            hwid = SecurityDefense.get_hwid()
            
            print("üîí G√ºvenli bot y√ºkleniyor...")
            print("üîë License doƒürulanƒ±yor...")
            
            try:
                import socket
                socket.setdefaulttimeout(5)
                socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect(("8.8.8.8", 53))
            except:
                return self._get_offline_key(license_key, hwid)
            
            payload = {
                "license": license_key,
                "hwid": hwid
            }
            
            try:
                response = requests.post(
                    f"{self.api_url}/get_key",
                    json=payload,
                    timeout=15,
                    headers={'User-Agent': 'SecureBot/1.0'}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if data.get("valid"):
                        api_key = data.get("key")
                        if api_key:
                            if len(api_key) >= 32:
                                decrypt_key = api_key[:32].encode('utf-8')
                            else:
                                import hashlib
                                key_hash = hashlib.sha256(api_key.encode()).hexdigest()
                                decrypt_key = key_hash[:32].encode('utf-8')
                            
                            print("‚úÖ License doƒürulandƒ±")
                            return decrypt_key
                        else:
                            print("‚ùå License doƒürulama hatasƒ±")
                            return self._get_offline_key(license_key, hwid)
                    else:
                        print("‚ùå License ge√ßersiz")
                        return self._get_offline_key(license_key, hwid)
                else:
                    return self._get_offline_key(license_key, hwid)
                    
            except requests.exceptions.Timeout:
                return self._get_offline_key(license_key, hwid)
            except requests.exceptions.ConnectionError:
                return self._get_offline_key(license_key, hwid)
            except Exception as req_e:
                return self._get_offline_key(license_key, hwid)
                
        except Exception as e:
            return self._get_offline_key(license_key, hwid)
    
    def _get_offline_key(self, license_key, hwid):
        """Offline/Fallback decrypt key olu≈ütur"""
        try:
            valid_offline_keys = [
                "mert123", "mertcik123213", "test123", "demo123", 
                "offline", "local", "debug"
            ]
            
            if license_key.lower() in valid_offline_keys:
                key_material = f"{license_key}_{hwid}_OFFLINE_2024_SECURE"
                import hashlib
                key_hash = hashlib.sha256(key_material.encode()).hexdigest()
                decrypt_key = key_hash[:32].encode('utf-8')
                return decrypt_key
            else:
                print("‚ùå License ge√ßersiz")
                return None
                
        except Exception as e:
            print("‚ùå License doƒürulama hatasƒ±")
            return None
    
    def decrypt_in_memory(self, encrypted_file, key):
        """RAM'de ≈üifre √ß√∂zme"""
        try:
            # ≈ûifreli dosyayƒ± oku
            with open(encrypted_file, 'rb') as f:
                encrypted_data = f.read()
            
            # IV'yi ayƒ±r (ilk 16 byte)
            iv = encrypted_data[:16]
            encrypted_content = encrypted_data[16:]
            
            # AES √ß√∂zme
            cipher = AES.new(key, AES.MODE_CBC, iv)
            decrypted = cipher.decrypt(encrypted_content)
            
            # Padding'i kaldƒ±r
            padding_len = decrypted[-1]
            if isinstance(padding_len, int):
                decrypted = decrypted[:-padding_len]
            else:
                decrypted = decrypted[:-ord(padding_len)]
            
            return decrypted.decode('utf-8')
            
        except Exception as e:
            print(f"‚ùå {_decode_string(OBFUSCATED_STRINGS['DECRYPT_ERROR'])} {e}")
            return None
    
    def load_module_from_memory(self, source_code, module_name):
        """RAM'den mod√ºl y√ºkleme"""
        try:
            # Ge√ßici dosya olu≈ütur (sadece RAM i√ßin)
            temp_file = os.path.join(self.temp_dir, f"{module_name}.py")
            
            with open(temp_file, 'w', encoding='utf-8') as f:
                f.write(source_code)
            
            # Mod√ºl√º y√ºkle
            spec = importlib.util.spec_from_file_location(module_name, temp_file)
            module = importlib.util.module_from_spec(spec)
            
            # Sys.modules'e ekle
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            
            # Ge√ßici dosyayƒ± hemen sil
            os.remove(temp_file)
            
            return module
            
        except Exception as e:
            print(f"‚ùå Mod√ºl y√ºkleme hatasƒ±: {e}")
            return None
    
    def cleanup(self):
        """Temizlik i≈ülemleri"""
        try:
            if self.temp_dir and os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir, ignore_errors=True)
        except:
            pass

class SecureLoader:
    """Ana g√ºvenli y√ºkleyici"""
    
    def __init__(self, license_key):
        self.license_key = license_key
        self.decryptor = SecureDecryptor()
        self.bot_core_module = None
        
    def security_check(self):
        """G√ºvenlik kontrolleri"""
        print("üîí G√ºvenlik kontrolleri ba≈ülatƒ±lƒ±yor...")
        
        # Anti-debugging
        if SecurityDefense.check_debugger():
            print(f"‚ùå {_decode_string(OBFUSCATED_STRINGS['DEBUG_DETECTED'])}")
            return False
            
        # VM/Sandbox tespiti
        if SecurityDefense.check_vm():
            print(f"‚ö†Ô∏è {_decode_string(OBFUSCATED_STRINGS['VM_DETECTED'])}")
            time.sleep(2)  # VM'lerde yava≈ülat
            
        # Dosya b√ºt√ºnl√ºƒü√º
        if not SecurityDefense.anti_tamper():
            print(f"‚ùå {_decode_string(OBFUSCATED_STRINGS['TAMPER_ERROR'])}")
            return False
            
        print("‚úÖ G√ºvenlik kontrolleri ba≈üarƒ±lƒ±")
        return True
    
    def load_encrypted_bot(self):
        """≈ûifreli bot'u y√ºkle"""
        try:
            print("üîí G√ºvenli bot y√ºkleniyor...")
            
            if not self.security_check():
                return False
            
            if not self.decryptor.create_temp_env():
                return False
            
            decrypt_key = self.decryptor.get_decrypt_key(self.license_key)
            if not decrypt_key:
                return False
            
            decrypted_code = self.decryptor.decrypt_in_memory('bot_core.enc', decrypt_key)
            if not decrypted_code:
                return False
            
            self.bot_core_module = self.decryptor.load_module_from_memory(
                decrypted_code, 'bot_core'
            )
            
            if not self.bot_core_module:
                return False
            
            print("‚úÖ Bot ba≈üarƒ±yla y√ºklendi!")
            return True
            
        except Exception as e:
            print("‚ùå Y√ºkleme hatasƒ±")
            return False
    
    def get_bot_module(self):
        """Y√ºklenen bot mod√ºl√ºn√º d√∂nd√ºr"""
        return self.bot_core_module
    
    def shutdown(self):
        """G√ºvenli kapatma"""
        print("üßπ Temizlik yapƒ±lƒ±yor...")
        self.decryptor.cleanup()
        
        # Memory'den mod√ºl√º kaldƒ±r
        if 'bot_core' in sys.modules:
            del sys.modules['bot_core']

# Ana y√ºkleyici fonksiyonu
def load_secure_bot(license_key):
    """G√ºvenli bot y√ºkleyici"""
    loader = SecureLoader(license_key)
    
    try:
        if loader.load_encrypted_bot():
            return loader.get_bot_module(), loader
        else:
            print("‚ùå Bot y√ºklenemedi!")
            return None, None
    except Exception as e:
        print(f"‚ùå Kritik hata: {e}")
        return None, None

# Test i√ßin
if __name__ == "__main__":
    # Test license key
    test_license = "DEMO-LICENSE-KEY"
    
    bot_module, loader = load_secure_bot(test_license)
    if bot_module:
        print("üéâ Test ba≈üarƒ±lƒ±!")
    else:
        print("‚ùå Test ba≈üarƒ±sƒ±z!")
        
    if loader:
        loader.shutdown() 